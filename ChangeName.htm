<html><head><title>&#127760; Language Links:</title>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1" >
</head>
<body class='pod'>
<!--
  generated by Pod::Simple::HTML v3.42,
  using Pod::Simple::PullParser v3.42,
  under Perl v5.032001 at Thu Oct 24 18:50:49 2024 GMT.

 If you want to change this HTML document, you probably shouldn't do that
   by changing it directly.  Instead, see about changing the calling options
   to Pod::Simple::HTML, and/or subclassing Pod::Simple::HTML,
   then reconverting this document from the Pod source.
   When in doubt, email the author of Pod::Simple::HTML for advice.
   See 'perldoc Pod::Simple::HTML' for more info.

-->

<!-- start doc -->
<a name='___top' class='dummyTopAnchor' ></a>

<h1><a class='u'
name="_Language_Links:"
>&#127760; Language Links:</a></h1>

<h2><a class='u'
name="Language_Links:"
>Language Links:</a></h2>

<ul>
<li><a href="#Deutsch_(Deutschland)" class="podlinkpod"
>&#34;&#127465;&#127466; de-DE - Deutsch (Deutschland)&#34;</a></li>

<li><a href="#English_(United_Kingdom)" class="podlinkpod"
>&#34;&#127468;&#127463; en-GB - English (United Kingdom)&#34;</a></li>
</ul>

<h1><a class='u'
name="Deutsch_(Deutschland)"
>Deutsch (Deutschland)</a></h1>

<p>Beispiel f&#252;r die Angabe von Deutsch (Deutschland) in der Befehlszeile...</p>

<pre>    perl -CAS ChangeName.pm --spr de-DE</pre>

<p>Beispiel f&#252;r die Angabe von Deutsch (Deutschland) in einer unterst&#252;tzten <a href="#YAML_KONFIGURATION_(de-DE)" class="podlinkpod"
>&#34;YAML-Konfiguration&#8220;</a>...</p>

<pre>    Language Tag: de-DE</pre>

<p>Beispiel f&#252;r die Angabe keiner festgelegten Sprache in der Befehlszeile...</p>

<pre>    perl -CAS ChangeName.pm --spr</pre>

<p>Beispiel f&#252;r die Angabe keiner festgelegten Sprache in einer unterst&#252;tzten <a href="#YAML_KONFIGURATION_(de-DE)" class="podlinkpod"
>&#34;YAML-Konfiguration&#8220;</a>...</p>

<pre>    Language Tag:</pre>

<p>Befehlszeilen-<a href="#OPTIONEN_(de-DE)" class="podlinkpod"
>&#34;Optionen&#34;</a> haben Vorrang vor <a href="#YAML_KONFIGURATION_(de-DE)" class="podlinkpod"
>&#34;YAML-Konfigurationen&#8220;</a>.</p>

<h2><a class='u'
name="DATEINAME_(de-DE)"
>DATEINAME (de-DE)</a></h2>

<p>ChangeName.pm &#8211; Namen von Personen in &#8222;Dataset&#8220;-Datens&#228;tzen &#228;ndern.</p>

<h2><a class='u'
name="SYNOPSE_(de-DE)"
>SYNOPSE (de-DE)</a></h2>

<pre>    # Datei in der Befehlszeile ausf&#252;hren:
    perl ./ChangeName.pm

    # In der Befehlszeile mit Argumenten und Flags ausf&#252;hren:
    perl -CAS ./ChangeName.pm MeinArchiv bob Bobbi vorname --exakt --ausf&#252;hrlich --live</pre>

<h2><a class='u'
name="DATEIBESCHREIBUNG_(de-DE)"
>DATEIBESCHREIBUNG (de-DE)</a></h2>

<p>Eine Datei mit mehreren Perl-Paketen, die jeweils bei einer Operation zum &#196;ndern der mit einem EPrint verkn&#252;pften Namen innerhalb eines EPrints-Repositorys helfen.</p>

<p>Erfordert derzeit Perl 5.16 oder h&#246;her und wurde f&#252;r EPrints 3.4.x entwickelt.</p>

<p>Der Hauptteil der Datei selbst legt globale Perl-Einstellungen fest, wie z. B. das zu verwendende Perl-Versions-Feature-Bundle und globale UTF-8-Kodierungsparameter, bevor eingebettete Pakete beginnen.</p>

<p>BEGIN-Bl&#246;cke greifen in der Ladereihenfolge ein, um sicherzustellen, dass die Variable der Zeichenkodierungsschicht zur Kompilierzeit geladen wird und dass die Sprachklassen vor allen Paketen geladen werden, die sie verwenden. Sprachklassen werden au&#223;erdem am Anfang des Skripts positioniert, sodass sie auch zur Kompilierzeit zuerst geladen werden, da einige Pakete zur Kompilierzeit aufgerufen werden und sie ben&#246;tigen.</p>

<h2><a class='u'
name="ARGUMENTE_(de-DE)"
>ARGUMENTE (de-DE)</a></h2>

<p>ChangeName.pm betrachtet die ersten vier in der Befehlszeile angegebenen Argumente als...</p>

<ol>
<li>...eine EPrints-Archiv-ID (<code>MeinArchiv</code> im obigen Beispiel <a href="#SYNOPSE_(de-DE)" class="podlinkpod"
>&#34;SYNOPSE (de-DE)&#34;</a>),</li>

<li>...dann einen Suchbegriff ohne Ber&#252;cksichtigung der Gro&#223;-/Kleinschreibung (<code>bob</code> im obigen Beispiel <a href="#SYNOPSE_(de-DE)" class="podlinkpod"
>&#34;SYNOPSE (de-DE)&#34;</a>),</li>

<li>...dann einen Ersatz mit Ber&#252;cksichtigung der Gro&#223;-/Kleinschreibung (<code>Bobbi</code> im obigen Beispiel <a href="#SYNOPSE_(de-DE)" class="podlinkpod"
>&#34;SYNOPSE (de-DE)&#34;</a>),</li>

<li>...und schlie&#223;lich einen Namensteil &#8211; entweder den &#8222;<code>Vorname</code>&#8220; oder den &#8222;<code>Familienname</code>&#8220; (&#8222;<code>vorname</code>&#8220; im obigen Beispiel <a href="#SYNOPSE_(de-DE)" class="podlinkpod"
>&#34;SYNOPSE (de-DE)&#34;</a>).</li>
</ol>

<p>Kann auch eine Reihe von Flags akzeptieren (vorangestellt durch zwei Bindestriche &#8211; wie die oben gezeigten Beispiele <code>&#8211;-exakt</code> <code>&#8211;-ausf&#252;hrlich</code> und <code>&#8211;-live</code>). Die Flags und ihre Verwendung werden unter <a href="#OPTIONEN_(de-DE)" class="podlinkpod"
>&#34;OPTIONEN (de-DE)&#34;</a> beschrieben. Ihre Positionierung relativ zu den Argumenten sollte keine Rolle spielen.</p>

<h2><a class='u'
name="OPTIONEN_(de-DE)"
>OPTIONEN (de-DE)</a></h2>

<dl>
<dt><a name="-sp_Sprachtag,_--spr_Sprachtag,_--sprache=Sprachtag"
><b>-sp</b> <i>Sprachtag</i>, <b>--spr</b> <i>Sprachtag</i>, <b>--sprache</b>=<i>Sprachtag</i></a></dt>

<dd>
<p>Erm&#246;glicht die Einstellung der Sprache &#252;ber einen Sprachtag. z. B. <code>de-DE</code> oder <code>en-GB</code>.</p>

<pre>    --spr de-DE</pre>

<p>Eine Liste der aktuellen Sprachpakete finden Sie unter <a href="#SPRACHPAKETE_(de-DE)" class="podlinkpod"
>&#34;Sprachpakete&#34;</a>.</p>

<p>Eine Liste der unterst&#252;tzten Sprachen und ihrer Sprachtags finden Sie unter <a href="#Language_Links%3A" class="podlinkpod"
>&#34;Language Links&#34;</a> (Sprachlinks).</p>

<dt><a name="-k_/pfad/zu/yaml_konfig.yml,_--konfig_/pfad/zu/yaml_konfig.yml,_--konfiguration=/pfad/zu/yaml_konfig.yml"
><b>-k</b> <i>/pfad/zu/yaml_konfig.yml</i>, <b>--konfig</b> <i>/pfad/zu/yaml_konfig.yml</i>, <b>--konfiguration</b>=<i>/pfad/zu/yaml_konfig.yml</i></a></dt>

<dd>
<p>Erm&#246;glicht die Einstellung des Speicherorts einer zu verwendenden YAML-Konfigurationsdatei z. ...</p>

<pre>    # Absoluter Pfad:
    --konfig /pfad/zu/yaml_konfig.yml

    # Relativer Pfad (relativ zum Verzeichnis, aus dem Sie den Befehl ausf&#252;hren):
    --konfig yaml_konfig.yml</pre>

<p>Siehe <a href="#YAML_KONFIGURATION_(de-DE)" class="podlinkpod"
>&#34;YAML KONFIGURATION (de-DE)&#34;</a>.</p>

<dt><a name="-li,_--live"
><b>-li</b>, <b>--live</b></a></dt>

<dd>
<p>Stellt sicher, dass &#196;nderungen wirksam werden.</p>

<p>Ohne dieses Flag wird das Skript standardm&#228;&#223;ig im Probelaufmodus ausgef&#252;hrt, in dem &#196;nderungen nicht wirksam werden.</p>

<dt><a name="-e,_-g,_--exakt,_--genau,_--genaue"
><b>-e</b>, <b>-g</b>, <b>--exakt</b>, <b>--genau</b>, <b>--genaue</b></a></dt>

<dd>
<p>Gibt an, dass der Suchbegriff f&#252;r die Suche, wenn er in der Befehlszeile angegeben wird, auch f&#252;r nachfolgendes Suchen und Ersetzen als Gro&#223;-/Kleinschreibung-unabh&#228;ngiger Suchwert interpretiert werden soll (Suchen innerhalb der Suchergebnisse &#252;ber vollst&#228;ndige &#220;bereinstimmungen, nicht &#252;ber teilweise &#220;bereinstimmungen).</p>

<p>Das bedeutet, dass Sie bei Verwendung dieses Flags bei der Such- und Ersetzungsoperation, die f&#252;r die Suchergebnisse ausgef&#252;hrt wird, nicht nach einem Suchwert gefragt werden.</p>

<p>Ihr allgemeiner anf&#228;nglicher Suchbegriff zum Abrufen von Suchergebnissen wird auch als Ihr nachfolgender spezifischer Suchwert f&#252;r die Suche innerhalb Ihrer Suchergebnisse betrachtet, sodass dies eine exakte Suche ist (wenn auch ohne Ber&#252;cksichtigung der Gro&#223;-/Kleinschreibung).</p>

<dt><a name="-a,_--ausfhrl,_--ausfhrlich"
><b>-a</b>, <b>--ausf&#252;hrl</b>, <b>--ausf&#252;hrlich</b></a></dt>

<dd>
<p>Bietet w&#228;hrend der Operation zus&#228;tzliche aufschlussreiche Ausgaben.</p>

<dt><a name="-d,_--debug"
><b>-d</b>, <b>--debug</b></a></dt>

<dd>
<p>Zeigt w&#228;hrend der Ausf&#252;hrung ausf&#252;hrliche und Debugmeldungen an. Zeigt au&#223;erdem zu Debugzwecken die von <a href="https://metacpan.org/pod/Data%3A%3ADumper" class="podlinkpod"
>Data::Dumper</a> abgeleitete Protokollausgabe an. Verwenden Sie das Flag <code>--kein_dumper</code>, um dies zu unterdr&#252;cken.</p>

<p>Wenn <code>--ausf&#252;hrlich</code> oder <code>--stacktrace</code> zusammen mit <code>--debug</code> verwendet wird, wird nach jeder Debug-Meldung auch die <code>EPrints-&#62;trace</code>-Ausgabe angezeigt. Verwenden Sie das Flag <code>--kein_stacktrace</code>, um solche Stacktrace-Informationen zu unterdr&#252;cken.</p>

<dt><a name="-t,_-st,_--trace,_--stacktrace"
><b>-t</b>, <b>-st</b>, <b>--trace</b>, <b>--stacktrace</b></a></dt>

<dd>
<p>Sollte das <code>--debug</code>-Flag gesetzt sein, stellt dieses <code>--stacktrace</code>-Flag sicher, dass neben jeder Protokollmeldung ein <code>EPrints-&#62;trace</code>-Stacktrace angezeigt wird, es sei denn, dieses Flag wird durch ein Flag <code>--kein_stacktrace</code> unterdr&#252;ckt.</p>

<dt><a name="-keint,_-kein_t,_--keintrace,_--kein_trace,_--keinstacktrace,_--kein_stacktrace"
><b>-keint</b>, <b>-kein_t</b>, <b>--keintrace</b>, <b>--kein_trace</b>, <b>--keinstacktrace</b>, <b>--kein_stacktrace</b></a></dt>

<dd>
<p>Verhindert die Anzeige von <code>EPrints-&#62;trace</code>-Stacktraces, die andernfalls angezeigt w&#252;rden, wenn entweder das Flag <code>--debug</code> und das Flag <code>--ausf&#252;hrlich</code> oder das Flag <code>--debug</code> und das Flag <code>--stacktrace</code> zusammen verwendet werden.</p>

<dt><a name="-keind,_-kein_d,_--keindump,_--kein_dump,_--keindumper,_--kein_dumper"
><b>-keind</b>, <b>-kein_d</b>, <b>--keindump</b>, <b>--kein_dump</b>, <b>--keindumper</b>, <b>--kein_dumper</b></a></dt>

<dd>
<p>Verhindert die Anzeige von aus <a href="https://metacpan.org/pod/Data%3A%3ADumper" class="podlinkpod"
>Data::Dumper</a> abgeleiteten Protokollmeldungen, wenn das <code>--debug</code>-Flag aktiviert ist.</p>
</dd>
</dl>

<h2><a class='u'
name="YAML-KONFIGURATION_(de-DE)"
>YAML-KONFIGURATION (de-DE)</a></h2>

<p>Die Datei <code>ChangeName.pm</code> hat bereits interne Konfigurationswerte festgelegt, die teilweise oder vollst&#228;ndig durch eine externe Konfigurationsdatei &#252;berschrieben werden k&#246;nnen.</p>

<p>Eine externe Konfiguration wird automatisch aus jeder <code>ChangeNameConfig.yml</code>-Datei (Gro&#223;-/Kleinschreibung beachten) geladen, die sich im selben Verzeichnis wie die Datei <code>ChangeName.pm</code> befindet.</p>

<p>Alternativ k&#246;nnen Sie eine benutzerdefinierte Konfigurationsdatei mit einem beliebigen Pfad und Dateinamen &#252;ber die Option <code>--konfig</code> verwenden, die in <a href="#OPTIONEN_(de-DE)" class="podlinkpod"
>&#34;OPTIONEN (de-DE)&#34;</a> beschrieben wird.</p>

<h3><a class='u'
name="Konfigurationswerte"
>Konfigurationswerte</a></h3>

<pre>    EPrints Perl Library Path: /opt/eprints3/perl_lib/

    Language Tag: de-DE

    Fields to Search:
        -   creators_name
        -   contributors_name
        -   editors_name

    Dataset to Use: eprint

    Force Commit Changes to Database: yes

    Search Field Match Type: IN

    Search Field Merge Type: ANY</pre>

<p>Oben sind die derzeit unterst&#252;tzten Konfigurationseinstellungen mit Beispielwerten aufgef&#252;hrt. Sie k&#246;nnen in Ihrer Konfiguration beliebig viele davon einschlie&#223;en oder weglassen.</p>

<p>Bei den Namen der Konfigurationseinstellungen wird zwischen Gro&#223;- und Kleinschreibung unterschieden.</p>

<dl>
<dt><a name="EPrints_Perl_Library_Path:"
>EPrints Perl Library Path:</a></dt>

<dd>
<p>Dies ist der Pfad der Perl-Bibliothek Ihrer lokalen EPrints-Repository-Installation. Normalerweise handelt es sich um einen Ordner <code>perl_lib</code> innerhalb des Ordners, in dem Sie Ihr EPrints-Repository installiert haben. In fast allen EPrints-Repositorien lautet er: <code>/opt/eprints3/perl_lib/</code>.</p>

<p>Wenn Sie Ihre EPrints jedoch in einem ungew&#246;hnlichen Ordner installiert haben, m&#246;chten Sie diese Einstellung m&#246;glicherweise in: <code>/ungew&#246;hnlichen_ordner/eprints3/perl_lib/</code> &#228;ndern.</p>

<p>Beachten Sie, dass sowohl das E als auch das P in EPrints hier im Namen der Einstellung (&#8222;EPrints Perl Library Path&#8220;) gro&#223; geschrieben werden.</p>

<p>Bei den Namen der Konfigurationseinstellungen wird zwischen Gro&#223;- und Kleinschreibung unterschieden.</p>

<dt><a name="Language_Tag:"
>Language Tag:</a></dt>

<dd>
<p>Dies ist die Sprache, die das Skript verwenden soll, ausgedr&#252;ckt als Sprachtag. Eine Liste der unterst&#252;tzten Sprachen, einschlie&#223;lich ihrer Sprachtags, finden Sie im Abschnitt <a href="#Language_Links%3A" class="podlinkpod"
>&#34;Language Links&#34;</a> (Sprachlinks).</p>

<p>Die Sprache sollte ein einzelnes Sprach-Tag oder nichts sein.</p>

<p>Wenn das Feld nicht festgelegt ist, fehlt oder leer gelassen wird, wird das Skript mehrsprachig ausgef&#252;hrt und verwendet alle unterst&#252;tzten Sprachen.</p>

<dt><a name="Fields_to_Search:"
>Fields to Search:</a></dt>

<dd>
<p>Dies sind die Felder, die Sie innerhalb des von Ihnen gew&#228;hlten Datensatztyps durchsuchen m&#246;chten. Derzeit sind die Standardsuchfelder <code>creators_name</code>, <code>contributors_name</code> und <code>editors_name</code>. Sie k&#246;nnen diese nach Belieben anpassen oder die Suchfelder auf nur eines dieser Felder beschr&#228;nken.</p>

<dt><a name="Dataset_to_Use:"
>Dataset to Use:</a></dt>

<dd>
<p>Standardm&#228;&#223;ig auf <code>eprint</code> eingestellt &#8211; kann auf jeden Datensatz eingestellt werden, in dem Sie eine Suche durchf&#252;hren und Namen &#228;ndern m&#246;chten. Dieses Skript wurde nur mit dem Datensatz <code>eprint</code> getestet.</p>

<dt><a name="Force_Commit_Changes_to_Database:"
>Force Commit Changes to Database:</a></dt>

<dd>
<p>Nimmt ein <code>yes</code> oder <code>y</code> (ohne Ber&#252;cksichtigung der Gro&#223;-/Kleinschreibung) an, um ein Commit zu erzwingen, oder etwas anderes (wie z. B. <code>no</code>), um ein Commit nicht zu erzwingen.</p>

<p>Manchmal ist ein erzwungenes Commit erforderlich, damit Ihre &#196;nderungen wirksam werden.</p>

<dt><a name="Search_Field_Match_Type:"
>Search Field Match Type:</a></dt>

<dd>
<p>Dies ist hier online dokumentiert: <a href="https://wiki.eprints.org/w/API:EPrints/Search/Field#DESCRIPTION" class="podlinkurl"
>https://wiki.eprints.org/w/API:EPrints/Search/Field#DESCRIPTION</a> und kann einen der folgenden Werte haben:</p>

<dl>
<dt><a name="IN"
>IN</a></dt>

<dd>
<p>(Abk&#252;rzung f&#252;r Index). Behandeln Sie den Wert als eine Liste von durch Leerzeichen getrennten W&#246;rtern. Suchen Sie im Volltextindex nach jedem einzelnen. Bei Betreffzeilen m&#252;ssen Sie diese Betreffzeilen-IDs oder die ihrer Nachkommen im Betreffbaum abgleichen.</p>

<dt><a name="EQ"
>EQ</a></dt>

<dd>
<p>(Abk&#252;rzung f&#252;r &#8222;equal&#8220; [gleich]). Behandeln Sie den Wert als einzelne Zeichenfolge. Passen Sie nur die Felder an, die diesen Wert haben.</p>

<dt><a name="EX"
>EX</a></dt>

<dd>
<p>(Abk&#252;rzung f&#252;r &#8222;exakt&#8220;). Wenn der Wert eine leere Zeichenfolge ist, wird nach leeren Feldern gesucht, anstatt dieses Suchfeld zu &#252;berspringen. Bei Betreffzeilen werden die angegebenen Betreffzeilen abgeglichen, nicht jedoch deren Nachkommen.</p>

<dt><a name="SET"
>SET</a></dt>

<dd>
<p>Wenn der Wert nicht leer ist.</p>

<dt><a name="NO"
>NO</a></dt>

<dd>
<p>Dies wird normalerweise nur intern verwendet und f&#252;hrt dazu, dass das betreffende Suchfeld keine Treffer liefert. Dies geschieht, ohne dass Verarbeitungsaufwand f&#252;r eine gr&#252;ndliche Suche betrieben wird.</p>
</dd>
</dl>

<dt><a name="Search_Field_Merge_Type:"
>Search Field Merge Type:</a></dt>

<dd>
<p>Dies ist auch hier online dokumentiert: <a href="https://wiki.eprints.org/w/API:EPrints/Search/Field#DESCRIPTION" class="podlinkurl"
>https://wiki.eprints.org/w/API:EPrints/Search/Field#DESCRIPTION</a> und kann einen der folgenden Werte haben:</p>

<dl>
<dt><a name="ALL"
>ALL</a></dt>

<dd>
<p>Ordnen Sie ein Element nur dann zu, wenn alle durch Leerzeichen etrennten W&#246;rter mit dem Element &#252;bereinstimmen.</p>

<dt><a name="ANY"
>ANY</a></dt>

<dd>
<p>Stimmt mit einem Element &#252;berein, wenn eines der durch Leerzeichen getrennten W&#246;rter innerhalb des Werts mit dem Element &#252;bereinstimmt.</p>
</dd>
</dl>

<p>Beachten Sie, dass diese Einstellung keine Auswirkungen auf <code>EX</code>-&#220;bereinstimmungen hat, die immer mit dem gesamten Wert &#252;bereinstimmen.</p>
</dd>
</dl>

<h3><a class='u'
name="Beispiel_einer_YAML-Konfiguration"
>Beispiel einer YAML-Konfiguration</a></h3>

<p>Sie k&#246;nnen das folgende YAML-Beispiel als Vorlage f&#252;r Ihre eigene externe <code>ChangeNameConfig.yml</code>-Datei (oder eine individuell benannte <code>.yml</code>-Konfigurationsdatei) verwenden und es dann nach Bedarf anpassen:</p>

<pre>    # Dies ist eine YAML-Konfigurationsdatei:
    %YAML 1.2
    # Drei Bindestriche, um ein neues YAML-Dokument zu beginnen.
    ---

    EPrints Perl Library Path: /opt/eprints3/perl_lib/

    Language Tag: de-DE

    Fields to Search:
        -   creators_name
        -   contributors_name
        -   editors_name

    Dataset to Use: eprint

    Force Commit Changes to Database: yes

    # Geben Sie f&#252;r das Obige ein &#8222;yes&#8220; oder &#8222;y&#8220;
    # (ohne Ber&#252;cksichtigung der Gro&#223;-/Kleinschreibung) ein,
    # um das Festschreiben zu erzwingen,
    # oder etwas anderes (z. B. &#8222;no&#8220;),
    # um das Festschreiben nicht zu erzwingen.

    Search Field Match Type: IN

    Search Field Merge Type: ANY

    # Der Parameter
    # &#8222;Search Field Match Type&#8220; (Suchfeld-&#220;bereinstimmungstyp)
    # kann einer der folgenden sein:

    # IN
    # (Abk&#252;rzung f&#252;r Index).
    # Behandeln Sie den Wert als eine Liste von durch Leerzeichen getrennten W&#246;rtern.
    # Suchen Sie im Volltextindex nach jedem einzelnen.
    # Bei Betreffzeilen m&#252;ssen Sie diese Betreffzeilen-IDs
    # oder die ihrer Nachkommen im Betreffbaum abgleichen.

    # EQ
    # (Abk&#252;rzung f&#252;r &#8222;equal&#8220; [gleich]).
    # Behandeln Sie den Wert als einzelne Zeichenfolge.
    # Passen Sie nur die Felder an, die diesen Wert haben.

    # EX
    # (Abk&#252;rzung f&#252;r &#8222;exakt&#8220;).
    # Wenn der Wert eine leere Zeichenfolge ist,
    # wird nach leeren Feldern gesucht,
    # anstatt dieses Suchfeld zu &#252;berspringen.
    # Bei Betreffzeilen werden
    # die angegebenen Betreffzeilen abgeglichen,
    # nicht jedoch deren Nachkommen.

    # SET
    # Wenn der Wert nicht leer ist.

    # NO
    # Dies wird normalerweise
    # nur intern verwendet
    # und f&#252;hrt dazu,
    # dass das betreffende
    # Suchfeld keine Treffer
    # liefert.
    # Dies geschieht,
    # ohne dass Verarbeitungsaufwand
    # f&#252;r eine gr&#252;ndliche
    # Suche betrieben wird.

    # Der Parameter
    # &#8222;Search Field Merge Type&#8220; (Suchfeld-Zusammenf&#252;hrungstyp)
    # kann einer der folgenden sein:

    # ALL
    # Ordnen Sie ein Element nur dann zu,
    # wenn alle durch Leerzeichen 
    # etrennten W&#246;rter
    # mit dem Element &#252;bereinstimmen.

    # ANY
    # Stimmt mit einem Element &#252;berein,
    # wenn eines der durch Leerzeichen
    # getrennten W&#246;rter innerhalb des
    # Werts mit dem Element &#252;bereinstimmt.

    # &#8222;Search Field Merge Type&#8220; (Suchfeld-Zusammenf&#252;hrungstyp) hat
    # keine Auswirkungen auf EX-&#220;bereinstimmungen,
    # die immer mit dem gesamten Wert &#252;bereinstimmen.

    ...
    # Drei Punkte zum Beenden des aktuellen YAML-Dokument.</pre>

<h2><a class='u'
name="SPRACHPAKETE_(de-DE)"
>SPRACHPAKETE (de-DE)</a></h2>

<p>Diese Klassen enthalten ein sprachspezifisches Lexikon mit lokalisierten Konfigurationen, Token und Phrasen. Zus&#228;tzlich k&#246;nnen in diesen Klassen auch POD-&#220;bersetzungen enthalten sein.</p>

<h3><a class='u'
name="ChangeName::Languages::de_de"
>ChangeName::Languages::de_de</a></h3>

<blockquote>
<p>Deutsch (Deutschland).</p>
</blockquote>

<h3><a class='u'
name="ChangeName::Languages::en_gb"
>ChangeName::Languages::en_gb</a></h3>

<blockquote>
<p>Englisch (Vereinigtes K&#246;nigreich).</p>
</blockquote>

<h2><a class='u'
name="PERL-PAKETE_(de-DE)"
>PERL-PAKETE (de-DE)</a></h2>

<h3><a class='u'
name="ChangeName::Utilities_(de-DE)"
>ChangeName::Utilities (de-DE)</a></h3>

<p>Paket, das n&#252;tzliche Dienstprogramme und Funktionen speichert, die von anderen Paketen in dieser <code>ChangeName.pm</code>-Datei verwendet werden.</p>

<h3><a class='u'
name="ChangeName::Config::YAML_(de-DE)"
>ChangeName::Config::YAML (de-DE)</a></h3>

<p>Paket, das YAML-formatierte Standardkonfigurationseinstellungen speichert. Wird verwendet, wenn keine externe <code>.yml</code>-Datei bereitgestellt wird, oder f&#252;r Standardwerte, falls eine externe Datei eine Einstellung ausl&#228;sst.</p>

<h3><a class='u'
name="ChangeName::Config_(de-DE)"
>ChangeName::Config (de-DE)</a></h3>

<p>Paket, das die Konfiguration l&#228;dt.</p>

<h3><a class='u'
name="ChangeName::Languages_(de-DE)"
>ChangeName::Languages &#8203;&#8203;(de-DE)</a></h3>

<p><a href="https://metacpan.org/pod/Locale%3A%3AMaketext" class="podlinkpod"
>Locale::Maketext</a>-Projektklasse zum Laden von Sprachklassen.</p>

<h3><a class='u'
name="ChangeName::Language_(de-DE)"
>ChangeName::Language (de-DE)</a></h3>

<p>Unsere eigene Sprachklasse f&#252;r die Sprache, die wir verwenden werden. Ihr <code>language_handle</code>-Attribut kann undefiniert bleiben, um alle unterst&#252;tzten Sprachen zu verwenden.</p>

<h3><a class='u'
name="ChangeName::Log_(de-DE)"
>ChangeName::Log (de-DE)</a></h3>

<p>Erm&#246;glicht die Erstellung eines <code>ChangeName::Log</code>-Objektinstanz, das &#252;ber Methoden zum Protokollieren von ausf&#252;hrlichen, debug, stacktrace und <a href="https://metacpan.org/pod/Data%3A%3ADumper" class="podlinkpod"
>Data::Dumper</a>-Ausgaben in die <code>log</code>methode eines <code>EPrints::Repository</code> oder <code>STDERR</code> verf&#252;gt.</p>

<h3><a class='u'
name="ChangeName::Modulino_(de-DE)"
>ChangeName::Modulino (de-DE)</a></h3>

<p>F&#252;hrt das Skript &#252;ber die Befehlszeile aus oder startet den Vorgang &#252;ber eine neue Modulino-Klasseninstanz.</p>

<h3><a class='u'
name="ChangeName::Operation_(de-DE)"
>ChangeName::Operation (de-DE)</a></h3>

<p>F&#252;hrt den Vorgang zur Namens&#228;nderung aus.</p>

<h2><a class='u'
name="AUTOR_(de-DE)"
>AUTOR (de-DE)</a></h2>

<p>Andrew Mehta</p>

<h2><a class='u'
name="COPYRIGHT_UND_LIZENZ_(de-DE)"
>COPYRIGHT UND LIZENZ (de-DE)</a></h2>

<p>Copyright &#169;2024, Andrew Mehta.</p>

<p>Dieses Programm ist kostenlose Software; Sie k&#246;nnen es unter denselben Bedingungen wie Perl 5.40.0 weitergeben und/oder &#228;ndern. Weitere Einzelheiten finden Sie im vollst&#228;ndigen Text der Lizenzen &#252;ber <a href="https://metacpan.org/pod/perlartistic" class="podlinkpod"
>perlartistic</a> und <a href="https://metacpan.org/pod/perlgpl" class="podlinkpod"
>perlgpl</a>. Dieses Programm wird in der Hoffnung verbreitet, dass es n&#252;tzlich sein wird, jedoch ohne jegliche Garantie; ohne die implizite Garantie der Marktg&#228;ngigkeit oder Eignung f&#252;r einen bestimmten Zweck.</p>

<h1><a class='u'
name="English_(United_Kingdom)"
>English (United Kingdom)</a></h1>

<p>Example declaring English (United Kingdom) at the commandline...</p>

<pre>    perl -CAS ChangeName.pm --lang en-GB</pre>

<p>Example declaring English (United Kingdom) within supported <a href="#YAML_CONFIGURATION_(en-GB)" class="podlinkpod"
>&#34;YAML configuration&#34;</a>...</p>

<pre>    Language Tag: en-GB</pre>

<p>Example declaring no set language at the commandline...</p>

<pre>    perl -CAS ChangeName.pm --lang</pre>

<p>Example declaring no set language within supported <a href="#YAML_CONFIGURATION_(en-GB)" class="podlinkpod"
>&#34;YAML configuration&#34;</a>...</p>

<pre>    Language Tag:</pre>

<p>Commandline <a href="#OPTIONS_(en-GB)" class="podlinkpod"
>&#34;options&#34;</a> take precedence over <a href="#YAML_CONFIGURATION_(en-GB)" class="podlinkpod"
>&#34;YAML configurations&#34;</a>.</p>

<h2><a class='u'
name="FILENAME_(en-GB)"
>FILENAME (en-GB)</a></h2>

<p>ChangeName.pm - change people&#39;s names on dataset records.</p>

<h2><a class='u'
name="SYNOPSIS_(en-GB)"
>SYNOPSIS (en-GB)</a></h2>

<pre>    # Run file at the command line:
    perl ./ChangeName.pm

    # Run at the command line with arguments and flags:
    perl -CAS ./ChangeName.pm MyArchive bob Bobbi given --exact --verbose --live</pre>

<h2><a class='u'
name="FILE_DESCRIPTION_(en-GB)"
>FILE DESCRIPTION (en-GB)</a></h2>

<p>A file containing multiple Perl packages, that each help in an operation, for changing the names associated with an EPrint, within an EPrints repository.</p>

<p>Currently requires Perl 5.16 or higher, and designed with EPrints 3.4.x in mind.</p>

<p>The main body of the file itself, sets global Perl settings, such as the Perl version feature bundle to use, and UTF-8 encoding globals, before any embedded packages begin.</p>

<p><code>BEGIN</code> blocks intervene in load order, to ensure the encoding layer variable is loaded at compile time, and that the language classes are loaded before any packages that use them. Language classes are also positioned at the top of the script, so they are loaded first during compile time also, as some packages will be called at compile time, and need them.</p>

<h2><a class='u'
name="ARGUMENTS_(en-GB)"
>ARGUMENTS (en-GB)</a></h2>

<p>ChangeName.pm considers the first four arguments provided at the commandline to be...</p>

<ol>
<li>...an EPrints archive ID (<code>MyArchive</code> in the <a href="#SYNOPSIS_(en-GB)" class="podlinkpod"
>&#34;SYNOPSIS (en-GB)&#34;</a> example above),</li>

<li>...then a case insensitive search term (<code>bob</code> in the <a href="#SYNOPSIS_(en-GB)" class="podlinkpod"
>&#34;SYNOPSIS (en-GB)&#34;</a> example above),</li>

<li>...then a case sensitive replacement (<code>Bobbi</code> in the <a href="#SYNOPSIS_(en-GB)" class="podlinkpod"
>&#34;SYNOPSIS (en-GB)&#34;</a> example above),</li>

<li>...and finally a name part - either &#34;<code>given</code>&#34; name or &#34;<code>family</code>&#34; name (<code>given</code> in the <a href="#SYNOPSIS_(en-GB)" class="podlinkpod"
>&#34;SYNOPSIS (en-GB)&#34;</a> example above).</li>
</ol>

<p>Can also accept a number of flags (preceded by two dashes - such as the <code>--exact</code> <code>--verbose</code> and <code>--live</code> examples shown above). The flags and their usage are described under <a href="#OPTIONS_(en-GB)" class="podlinkpod"
>&#34;OPTIONS (en-GB)&#34;</a>. Their positioning relative to the arguments shouldn&#39;t matter.</p>

<h2><a class='u'
name="OPTIONS_(en-GB)"
>OPTIONS (en-GB)</a></h2>

<dl>
<dt><a name="-la_tag,_--lang_tag,_--language=tag"
><b>-la</b> <i>tag</i>, <b>--lang</b> <i>tag</i>, <b>--language</b>=<i>tag</i></a></dt>

<dd>
<p>Allows setting of language, by way of a language tag. i.e. <code>en-GB</code>, or <code>de-DE</code>.</p>

<pre>    --lang en-GB</pre>

<p>See <a href="#LANGUAGE_PACKAGES_(en-GB)" class="podlinkpod"
>&#34;Language Packages&#34;</a> for list of current language packages.</p>

<p>See <a href="#Language_Links%3A" class="podlinkpod"
>&#34;Language Links&#34;</a> for list of supported languages and their language tags.</p>

<dt><a name="-c_/path/to/yaml_config.yml,_--config_/path/to/yaml_config.yml,_--configuration=/path/to/yaml_config.yml"
><b>-c</b> <i>/path/to/yaml_config.yml</i>, <b>--config</b> <i>/path/to/yaml_config.yml</i>, <b>--configuration</b>=<i>/path/to/yaml_config.yml</i></a></dt>

<dd>
<p>Allows setting the location of a YAML configuration file to use. i.e. ...</p>

<pre>    # Absolute path:
    --config /path/to/yaml_config.yml

    # Relative path (relative to the directory you run the command from):
    --config yaml_config.yml</pre>

<p>See <a href="#YAML_CONFIGURATION_(en-GB)" class="podlinkpod"
>&#34;YAML CONFIGURATION (en-GB)&#34;</a>.</p>

<dt><a name="-li,_--live"
><b>-li</b>, <b>--live</b></a></dt>

<dd>
<p>Ensures changes take effect.</p>

<p>Without this flag, the script will run in dry run mode by default, where changes do not take effect.</p>

<dt><a name="-e,_--exact"
><b>-e</b>, <b>--exact</b></a></dt>

<dd>
<p>Indicates the search term, if provided on the command line, should be interpreted as a case insensitive find value too (finding via full matches, and not partial matches).</p>

<p>This means that when using this flag, you will not be prompted for a find value, in the find and replace operation on the search results. Your search term will be considered your find value too, making this an exact search (albeit case insensitive).</p>

<dt><a name="-v,_--verbose"
><b>-v</b>, <b>--verbose</b></a></dt>

<dd>
<p>Provides additional insightful output during the operation.</p>

<dt><a name="-d,_--debug"
><b>-d</b>, <b>--debug</b></a></dt>

<dd>
<p>Shows verbose and debugging messages during execution. Also shows <a href="https://metacpan.org/pod/Data%3A%3ADumper" class="podlinkpod"
>Data::Dumper</a> derived log output for debugging purposes. Use the <code>--no_dumper</code> flag to suppress this.</p>

<p>When <code>--verbose</code> or <code>--trace</code> is used alongside <code>--debug</code>, <code>EPrints-&#62;trace</code> output will also be shown after each debug message. Use the <code>--no_trace</code> flag to suppress such stacktrace information.</p>

<dt><a name="-t,_--trace"
><b>-t</b>, <b>--trace</b></a></dt>

<dd>
<p>Should the debug flag be set, this trace flag will ensure an <code>EPrints-&#62;trace</code> stacktrace is displayed alongside every log message, unless this flag is suppressed by a <code>--no_trace</code> flag.</p>

<dt><a name="-not,_-no_t,_--notrace,_--no_trace,_--nostacktrace,_--no_stacktrace"
><b>-not</b>, <b>-no_t</b>, <b>--notrace</b>, <b>--no_trace</b>, <b>--nostacktrace</b>, <b>--no_stacktrace</b></a></dt>

<dd>
<p>Prevents the display of <code>EPrints-&#62;trace</code> stacktraces which would otherwise be shown when either the <code>--debug</code> flag and <code>--verbose</code> flag, or the <code>--debug</code> flag and <code>--trace</code> flag, are used together.</p>

<dt><a name="-nod,_-no_d,_--nodump,_--no_dump,_--nodumper,_--no_dumper"
><b>-nod</b>, <b>-no_d</b>, <b>--nodump</b>, <b>--no_dump</b>, <b>--nodumper</b>, <b>--no_dumper</b></a></dt>

<dd>
<p>Prevents the display of <a href="https://metacpan.org/pod/Data%3A%3ADumper" class="podlinkpod"
>Data::Dumper</a> derived log messages when the debug flag is in effect.</p>
</dd>
</dl>

<h2><a class='u'
name="YAML_CONFIGURATION_(en-GB)"
>YAML CONFIGURATION (en-GB)</a></h2>

<p>The file has internal configuration values set already, and these can be overwritten partially, or in full, by an external configuration file.</p>

<p>An external configuration will be automatically loaded from any <code>ChangeNameConfig.yml</code> file (case sensitive) found in the same directory as the <code>ChangeName.pm</code> file.</p>

<p>Alternatively, you can use a custom configuration file, with any path and filename you wish, via the <code>--config</code> option, described in <a href="#OPTIONS_(en-GB)" class="podlinkpod"
>&#34;OPTIONS (en-GB)&#34;</a>.</p>

<h3><a class='u'
name="Configuration_Values"
>Configuration Values</a></h3>

<pre>    EPrints Perl Library Path: /opt/eprints3/perl_lib/

    Language Tag: en-GB

    Fields to Search:
        -   creators_name
        -   contributors_name
        -   editors_name

    Dataset to Use: eprint

    Force Commit Changes to Database: yes

    Search Field Match Type: IN

    Search Field Merge Type: ANY</pre>

<p>Above are the currently supported configuration settings, with example values. You can include or omit as many of these as you wish, in your config.</p>

<p>The names of the configuration settings are case sensitive.</p>

<dl>
<dt><a name="EPrints_Perl_Library_Path:"
>EPrints Perl Library Path:</a></dt>

<dd>
<p>This is the path of your local EPrints Repository installation&#39;s Perl Library. It is typically a <code>perl_lib</code> folder, within the folder you installed your EPrints Repository to. In almost all EPrints Repositories it will be: <code>/opt/eprints3/perl_lib/</code>.</p>

<p>If you have installed your EPrints to an unusual folder, however, you may wish to alter this setting to: <code>/unusual_folder/eprints3/perl_lib/</code>.</p>

<p>Note that both the E and the P in EPrints are capitalised here in the name of the setting (EPrints Perl Library Path).</p>

<dt><a name="Language_Tag:"
>Language Tag:</a></dt>

<dd>
<p>This is the language the script is to use, expressed as a language tag. See <a href="#Language_Links%3A" class="podlinkpod"
>&#34;Language Links:&#34;</a> section for a list of supported languages, including their language tags.</p>

<p>The language, should be a single language tag, or nothing.</p>

<p>If the field is not set, missing, or left blank, the script will run multilingually, using all supported languages.</p>

<dt><a name="Fields_to_Search:"
>Fields to Search:</a></dt>

<dd>
<p>These are the dataset fields you wish to search. Currently, the default fields to search are <code>creators_name</code>, <code>contributors_name</code> and <code>editors_name</code> and you are free to customise these how you wish, or restrict the fields searched to only one of these.</p>

<dt><a name="Dataset_to_Use:"
>Dataset to Use:</a></dt>

<dd>
<p>Defaults to <code>eprint</code> - can be set to any dataset you wish to perform a search on, and change names in. This script has only been tested with the <code>eprint</code> dataset.</p>

<dt><a name="Force_Commit_Changes_to_Database:"
>Force Commit Changes to Database:</a></dt>

<dd>
<p>Takes a <code>yes</code> or <code>y</code> (case insensitive) to force commit, or anything else (such as <code>no</code>) to not force commit.</p>

<p>Force-committing is sometimes necessary to have your changes take effect.</p>

<dt><a name="Search_Field_Match_Type:"
>Search Field Match Type:</a></dt>

<dd>
<p>This is documented online here: <a href="https://wiki.eprints.org/w/API:EPrints/Search/Field#DESCRIPTION" class="podlinkurl"
>https://wiki.eprints.org/w/API:EPrints/Search/Field#DESCRIPTION</a> and can be any one of the following values:</p>

<dl>
<dt><a name="IN"
>IN</a></dt>

<dd>
<p>(Short for index). Treat the value as a list of whitespace-separated words. Search for each one in the full-text index. In the case of subjects, match these subject ids or those of any of their descendants in the subject tree.</p>

<dt><a name="EQ"
>EQ</a></dt>

<dd>
<p>(Short for equal). Treat the value as a single string. Match only fields which have this value.</p>

<dt><a name="EX"
>EX</a></dt>

<dd>
<p>(Short for exact). If the value is an empty string then search for fields which are empty, as oppose to skipping this search field. In the case of subjects, match the specified subjects, but not their descendants.</p>

<dt><a name="SET"
>SET</a></dt>

<dd>
<p>If the value is non-empty.</p>

<dt><a name="NO"
>NO</a></dt>

<dd>
<p>This is only really used internally, it means the search field will just fail to match anything without doing any actual searching.</p>
</dd>
</dl>

<dt><a name="Search_Field_Merge_Type:"
>Search Field Merge Type:</a></dt>

<dd>
<p>This is also documented online here: <a href="https://wiki.eprints.org/w/API:EPrints/Search/Field#DESCRIPTION" class="podlinkurl"
>https://wiki.eprints.org/w/API:EPrints/Search/Field#DESCRIPTION</a> and can be any one of the following values:</p>

<dl>
<dt><a name="ALL"
>ALL</a></dt>

<dd>
<p>Match an item only if all of the space-separated words in the value match.</p>

<dt><a name="ANY"
>ANY</a></dt>

<dd>
<p>Match an item if any of the space-separated words in the value match.</p>
</dd>
</dl>

<p>Note that this setting has no affect on <code>EX</code> matches, which always match the entire value.</p>
</dd>
</dl>

<h3><a class='u'
name="Example_YAML_Configuration"
>Example YAML Configuration</a></h3>

<p>You can use the following example YAML as a template for your own external <code>ChangeNameConfig.yml</code> file (or custom named <code>.yml</code> config file), and then customise it as required:</p>

<pre>    # This is a YAML Configuration File:
    %YAML 1.2
    # Three dashes to start new YAML document.
    ---

    EPrints Perl Library Path: /opt/eprints3/perl_lib/

    Language Tag: en-GB

    Fields to Search:
        -   creators_name
        -   contributors_name
        -   editors_name

    Dataset to Use: eprint

    Force Commit Changes to Database: yes

    # For the above, provide a yes or y (case insensitive) to force commit,
    # or anything else (such as no) to not force commit.

    Search Field Match Type: IN

    Search Field Merge Type: ANY

    # The &#34;Search Field Match Type&#34; parameter which can be one of:

    # IN
    # (short for index)
    # Treat the value as a list of whitespace-separated words. Search for each one in the full-text index.
    # In the case of subjects, match these subject ids or those of any of their descendants in the subject tree.

    # EQ
    # (short for equal)
    # Treat the value as a single string. Match only fields which have this value.

    # EX
    # (short for exact)
    # If the value is an empty string then search for fields which are empty, as oppose to skipping this search field.
    # In the case of subjects, match the specified subjects, but not their descendants.

    # SET
    # If the value is non-empty.

    # NO
    # This is only really used internally, it means the search field will just fail to match anything without doing any actual searching.

    # The &#34;Search Field Merge Type&#34; parameter can be one of:

    # ALL
    # Match an item only if all of the space-separated words in the value match.

    # ANY
    # Match an item if any of the space-separated words in the value match.

    # &#34;Search Field Merge Type&#34; has no affect on EX matches, which always match the entire value.

    ...
    # Three dots to end current YAML document.</pre>

<h2><a class='u'
name="LANGUAGE_PACKAGES_(en-GB)"
>LANGUAGE PACKAGES (en-GB)</a></h2>

<p>These classes contain a language specific lexicon, containing localised configurations, tokens, and phrases. Additionally POD translations may also be included in these classes.</p>

<h3><a class='u'
name="ChangeName::Languages::de_de"
>ChangeName::Languages::de_de</a></h3>

<blockquote>
<p>German (Germany).</p>
</blockquote>

<h3><a class='u'
name="ChangeName::Languages::en_gb"
>ChangeName::Languages::en_gb</a></h3>

<blockquote>
<p>English (United Kingdom).</p>
</blockquote>

<h2><a class='u'
name="PERL_PACKAGES_(en-GB)"
>PERL PACKAGES (en-GB)</a></h2>

<h3><a class='u'
name="ChangeName::Utilities_(en-GB)"
>ChangeName::Utilities (en-GB)</a></h3>

<p>Package storing useful utilities and functions, used by other packages in this <code>ChangeName.pm</code> file.</p>

<h4><a class='u'
name="MODULE_NAME_(ChangeName::Utilities_en-GB)"
>MODULE NAME (ChangeName::Utilities en-GB)</a></h4>

<p>ChangeName::Utilities - a collection of useful utilities and functions.</p>

<h4><a class='u'
name="VERSION_(ChangeName::Utilities_en-GB)"
>VERSION (ChangeName::Utilities en-GB)</a></h4>

<p>v2.0.0</p>

<h4><a class='u'
name="SYNOPSIS_(ChangeName::Utilities_en-GB)"
>SYNOPSIS (ChangeName::Utilities en-GB)</a></h4>

<pre>    # Name the utilities you wish to use...
    use ChangeName::Utilities qw(
        method_1
        method_2
    );

    # Then use them...
    my  $result =  method_1($required_values);</pre>

<h4><a class='u'
name="DESCRIPTION_(ChangeName::Utilities_en-GB)"
>DESCRIPTION (ChangeName::Utilities en-GB)</a></h4>

<p>Contains exportable subroutines that are useful utilities and functions for other packages in the <code>ChangeName::</code> namespace.</p>

<h4><a class='u'
name="METHODS_(ChangeName::Utilities_en-GB)"
>METHODS (ChangeName::Utilities en-GB)</a></h4>

<p><b>----------------</b></p>

<h5><a class='u'
name="validate_class_(en-GB)"
>validate_class (en-GB)</a></h5>

<p><b>----------------</b></p>

<p>Designed to be used with object instances. So...</p>

<pre>    # Can be written as either...
    $self-&#62;validate_class($thing =&#62; &#39;Desired::Class::Name&#39;);
    # ...or...
    validate_class($self, $thing =&#62; &#39;Desired::Class::Name&#39;);</pre>

<p>Takes an object, and a class name, as arguments - separated by a comma or fat comma as you wish.</p>

<p>Returns <code>undef</code> if the <code>$thing</code> is not of the desired class name. Returns <code>$thing</code> if the <code>$thing</code> is a valid class name.</p>

<p>Supports <a href="#ChangeName%3A%3ALog_(en-GB)" class="podlinkpod"
>&#34;ChangeName::Log (en-GB)&#34;</a> if <code>$self</code> has a <code>logger</code> method that returns a <code>ChangeName::Log</code> instance whose <code>ready</code> method returns true, indicating it is ready to begin being used to log with.</p>

<p><b>----------------</b></p>

<h5><a class='u'
name="valid_object_(en-GB)"
>valid_object (en-GB)</a></h5>

<p><b>----------------</b></p>

<p>Designed to be used with object instances. So...</p>

<pre>    # Can be written as either...
    $self-&#62;valid_object($thing);
    # ...or...
    valid_object($self, $thing);</pre>

<p>Takes a variable, and checks it is defined, and blessed into a class.</p>

<p>Returns <code>undef</code> if not defined, or not blessed into a class; otherwise, returns <code>$thing</code>.</p>

<p>Supports <a href="#ChangeName%3A%3ALog_(en-GB)" class="podlinkpod"
>&#34;ChangeName::Log (en-GB)&#34;</a> if <code>$self</code> has a <code>logger</code> method that returns a <code>ChangeName::Log</code> instance whose <code>ready</code> method returns true, indicating it is ready to begin being used to log with.</p>

<p><b>----------------</b></p>

<h5><a class='u'
name="get_options_(en-GB)"
>get_options (en-GB)</a></h5>

<p><b>----------------</b></p>

<p>Example:</p>

<pre>    $self-&#62;get_options(
        commandline_arguments   =&#62;  $array_reference_1,
        expected_options        =&#62;  $hash_reference_of_hash_references_1,
    );</pre>

<p>Convenience method. Takes a hash and passes it on to <a href="#process_commandline_arguments_(en-GB)" class="podlinkpod"
>&#34;process_commandline_arguments&#34;</a> and returns the first result - i.e. just an options hash reference, and not an arguments hash reference nor a <code>no_input</code> boolean flag.</p>

<p>See <a href="#process_commandline_arguments_(en-GB)" class="podlinkpod"
>&#34;process_commandline_arguments&#34;</a> for more information.</p>

<p><b>----------------</b></p>

<h5><a class='u'
name="get_arguments_(en-GB)"
>get_arguments (en-GB)</a></h5>

<p><b>----------------</b></p>

<p>Example:</p>

<pre>    $self-&#62;get_arguments(
        commandline_arguments   =&#62;  $array_reference_1,
        expected_arguments      =&#62;  $array_reference_2,
    );</pre>

<p>Convenience method. Takes a hash and passes it on to <a href="#process_commandline_arguments_(en-GB)" class="podlinkpod"
>&#34;process_commandline_arguments&#34;</a> and returns only the second result - i.e. just an arguments hash reference, and not an options hash reference nor a <code>no_input</code> boolean flag.</p>

<p>See <a href="#process_commandline_arguments_(en-GB)" class="podlinkpod"
>&#34;process_commandline_arguments&#34;</a> for more information.</p>

<p><b>----------------</b></p>

<h5><a class='u'
name="process_commandline_arguments_(en-GB)"
>process_commandline_arguments (en-GB)</a></h5>

<p><b>----------------</b></p>

<p>Takes a hash of arguments, as follows...</p>

<pre>    $self-&#62;process_commandline_arguments(
        commandline_arguments   =&#62;  $array_reference_1,
        expected_options        =&#62;  $hash_reference_of_hash_references_1,
        expected_arguments      =&#62;  $array_reference_2,
    );</pre>

<p>Example values are:</p>

<pre>    my  $array_reference_1      =   \@ARGV; # Special global variable containing commandline arguments.

    my  $hash_reference_of_hash_references_1 = {
            simple_options      =&#62;  {
                help            =&#62;  0,
            },
            optional_strings    =&#62;  {
                language        =&#62;  undef,
            },
            negatable_options   =&#62;  {
                verbose         =&#62;  0,
            },
            incremental_options =&#62;  {
                trace           =&#62;  0,
            },
    };

    my  $array_reference_2      =   # Names for your arguments 
                                    # in order they appear:
                                    [
                                        &#39;archive_id&#39;,
                                        &#39;search&#39;,
                                        &#39;replace&#39;,
                                        &#39;part&#39;,
                                    ];</pre>

<p>You can see that the hash reference is expected to contain separate nested hash references, for each type of supported option. Presently supported are...</p>

<ul>
<li>simple_options
<p>Akin to normal options. See <a href="https://metacpan.org/pod/Getopt%3A%3ALong#Simple-options" class="podlinkpod"
>&#34;Simple-options&#34; in Getopt::Long</a>.</p>
</li>

<li>optional_strings
<p>Akin to &#39;:s&#39; - see <a href="https://metacpan.org/pod/Getopt%3A%3ALong#Options-with-values" class="podlinkpod"
>&#34;Options-with-values&#34; in Getopt::Long</a>.</p>
</li>

<li>negatable_options
<p>Akin to &#39;!&#39; - see <a href="https://metacpan.org/pod/Getopt%3A%3ALong#A-little-bit-less-simple-options" class="podlinkpod"
>&#34;A-little-bit-less-simple-options&#34; in Getopt::Long</a>.</p>
</li>

<li>incremental_options
<p>Akin to &#39;+&#39; - see <a href="https://metacpan.org/pod/Getopt%3A%3ALong#A-little-bit-less-simple-options" class="podlinkpod"
>&#34;A-little-bit-less-simple-options&#34; in Getopt::Long</a>.</p>
</li>
</ul>

<p>Supports multi-language options, where <a href="https://metacpan.org/pod/Locale%3A%3AMaketext" class="podlinkpod"
>Locale::Maketext</a> Lexicon key and value conventions, for localising options within a specific language package are as follows:</p>

<pre>    # Key                       # Value
    &#39;options.option_name&#39;   =&#62;  &#39;option_name alternative_option_name short_option_name&#39;,</pre>

<p>For example...</p>

<pre>    # Key                       # Value
    &#39;options.config&#39;        =&#62;  &#39;config configuration conf&#39;,</pre>

<p>Or simply...</p>

<pre>    # Key                       # Value
    &#39;options.verbose&#39;       =&#62;  &#39;verbose&#39;,</pre>

<p>The key always remains English. The value should be localised to the language. The value string can contain as many space separated alternatives as desired.</p>

<p>Returns a list containing an options hash reference, an arguments hash reference, and a <code>no_input</code> flag.</p>

<pre>    my ($options, $arguments, $no_input)    =   $self-&#62;process_commandline_arguments(%hash);</pre>

<p>The <code>$no_input</code> flag should be considered a boolean, as it returns a true value if there are no arguments after options have been processed, and it returns a false value if there actually are arguments left, after options have been processed, and before arguments have been processed.</p>

<p>Designed to be used with object instances. So...</p>

<pre>    # Can be written as either...
    $self-&#62;process_commandline_arguments(%hash);
    # ...or...
    process_commandline_arguments($self, %hash);</pre>

<p>Supports <a href="#ChangeName%3A%3ALog_(en-GB)" class="podlinkpod"
>&#34;ChangeName::Log (en-GB)&#34;</a> if <code>$self</code> has a <code>logger</code> method that returns a <code>ChangeName::Log</code> instance whose <code>ready</code> method returns true, indicating it is ready to begin being used to log with.</p>

<p><b>----------------</b></p>

<h5><a class='u'
name="list_to_regex_logical_or_string_(en-GB)"
>list_to_regex_logical_or_string (en-GB)</a></h5>

<p><b>----------------</b></p>

<p>Designed to be used with object instances. So...</p>

<pre>    # Can be written as either...
    $self-&#62;list_to_regex_logical_or_string(@list);
    # ...or...
    list_to_regex_logical_or_string($self, @list);</pre>

<p>Takes a list, makes each defined element regex safe, and joins it by the pipe character &#34;<code>|</code>&#34;.</p>

<p>Returns the joined string. This is of use within a regex &#34;Logical Or&#34; grouping, and so as to allow for easier appending to the string with further alternatives, grouping brackets are not included in the output, and will need to be added, to form a grouping.</p>

<p>For example:</p>

<pre>    my  $acceptable_input           =   $self-&#62;list_to_regex_logical_or_string(
                                            &#39;given&#39;,
                                            &#39;family&#39;,
                                        );
    my  $matches_acceptable_input   =   qr/^($acceptable_input)$/;</pre>

<p>As you see in the above example, the result is encased within brackets, to form a &#34;Logical Or&#34; grouping from the string.</p>

<p><b>----------------</b></p>

<h5><a class='u'
name="is_populated_array_ref_(en-GB)"
>is_populated_array_ref (en-GB)</a></h5>

<p><b>----------------</b></p>

<p>Designed to be used with object instances. So...</p>

<pre>    # Can be written as either...
    my  $valid_value    =   $self-&#62;is_populated_array_ref($value);
    # ...or...
    my  $valid_value    =   is_populated_array_ref($self, $value);

    # Allowing for...
    if ($valid_value) {
        # do stuff - confident we have a populated array reference.
    };</pre>

<p>Takes a <code>$value</code>. If the <code>$value</code> is found to be an array reference populated with one or more values (warning - these array values can be <code>undef</code>) then it will return the original <code>$value</code> passed in.</p>

<p>If the passed in <code>$value</code> is found to not be an array reference, or to be an array reference that is empty, this method will return an <code>undef</code> value.</p>

<p><b>----------------</b></p>

<h5><a class='u'
name="is_populated_hash_ref_(en-GB)"
>is_populated_hash_ref (en-GB)</a></h5>

<p><b>----------------</b></p>

<p>Designed to be used with object instances. So...</p>

<pre>    # Can be written as either...
    my  $valid_value    =   $self-&#62;is_populated_hash_ref($value);
    # ...or...
    my  $valid_value    =   is_populated_hash_ref($self, $value);

    # Allowing for...
    if ($valid_value) {
        # do stuff - confident we have a hash reference with at least one hash key.
    };</pre>

<p>Takes a <code>$value</code>. If the <code>$value</code> is found to be a hash reference populated with at least one key (warning - does not check for a hash value paired with the hash key) then it will return the original <code>$value</code> passed in.</p>

<p>If the passed in <code>$value</code> is found to not be a hash reference, or to be a hash reference without any hash keys, this method will return an <code>undef</code> value.</p>

<p><b>----------------</b></p>

<h5><a class='u'
name="is_populated_scalar_ref_(en-GB)"
>is_populated_scalar_ref (en-GB)</a></h5>

<p><b>----------------</b></p>

<p>Designed to be used with object instances. So...</p>

<pre>    # Can be written as either...
    my  $valid_value    =   $self-&#62;is_populated_scalar_ref($value);
    # ...or...
    my  $valid_value    =   is_populated_scalar_ref($self, $value);

    # Allowing for...
    if ($valid_value) {
        # do stuff - confident we have a scalar
        # that dereferences to a true or zero value
        # - i.e. not an empty string, nor undef.
    };</pre>

<p>Takes a <code>$value</code>. If the <code>$value</code> is found to be a scalar reference populated with either a true value, or the number/character zero (i.e &#39;<code>0</code>&#39;) then it will return the original <code>$value</code> passed in.</p>

<p>If the passed in <code>$value</code> is found to not be a scalar reference, or to be a scalar reference that returns false and is not the number/character zero (&#39;<code>0</code>&#39;), then this method will return an <code>undef</code> value.</p>

<p><b>----------------</b></p>

<h5><a class='u'
name="is_true_or_zero_(en-GB)"
>is_true_or_zero (en-GB)</a></h5>

<p><b>----------------</b></p>

<p>Designed to be used with object instances. So...</p>

<pre>    # Can be written as either...
    my  $validated_value    =   $self-&#62;is_true_or_zero($value)? $value:
                                undef;
    # ...or...
    my  $validated_value    =   is_true_or_zero($self, $value)? $value:
                                undef;

    # Allowing for...
    if ($validated_value) {
        # do stuff - confident we have a string
        # that contains either a true value
        # or the number/character zero (0).
    };</pre>

<p>Takes a <code>$value</code>. Checks it is defined and true, or defined and the number/character zero (&#39;<code>0</code>&#39;).</p>

<p>Returns a boolean value evaluating to true or false, depending on if these conditions have been met or not.</p>

<p>Warning - does not currently return the original <code>$value</code>. This behaviour may change in a future update, to be more in keeping with other methods in this class.</p>

<p><b>----------------</b></p>

<h5><a class='u'
name="chunkify_(en-GB)"
>chunkify (en-GB)</a></h5>

<p><b>----------------</b></p>

<p>Designed to be used with object instances. So...</p>

<pre>    # Can be written as either...
    my  @array_of_array_refs    =   $self-&#62;chunkify($eprints_list);
    # ...or...
    my  @array_of_array_refs    =   chunkify($self, $eprints_list);</pre>

<p>This method, can help reduce processing strain, by breaking down an <code>EPrints::List</code> object into &#34;chunks&#34; of no more than 100 list items, using <code>EPrints::List</code>&#39;s <code>slice</code> method.</p>

<p>A different chunk size limit to <code>100</code> can also be provided by passing in a number after the list object.</p>

<p>For example, to use chunks of no more than <code>50</code> items...</p>

<pre>    my  @array_of_array_refs    =   $self-&#62;chunkify($eprints_list, 50);</pre>

<p>You can also omit the expected <code>$eprints_list</code> if <code>$self</code> has a <code>get_list_of_results</code> method that retrieves a valid <code>EPrints::List</code> object.</p>

<p>For example:</p>

<pre>    foreach my $current_chunk_of_100_results ($self-&#62;chunkify) {
        # Do something with no more than 100 results at a time,
        # from the list of results returned by
        # the $self-&#62;get_list_of_results method.
    }</pre>

<p>Returns an array of array references.</p>

<p><b>----------------</b></p>

<h5><a class='u'
name="stringify_array_ref_(en-GB)"
>stringify_array_ref (en-GB)</a></h5>

<p><b>----------------</b></p>

<p>Convert an array reference to a text string, consisting of the items separated by a universal <code>separator.stringify_array_ref</code> localisation value.</p>

<pre>    my  $array_reference    =   [1,2,3];
    $self-&#62;stringify_array_ref($array_reference);   # Outputs &#34;1, 2, 3&#34;
                                                    # when separator.stringify_array_ref language token
                                                    # is set to a comma and a space.</pre>

<p>Requires <code>$self</code> to have a <code>language</code> method that returns a <a href="#ChangeName%3A%3ALanguage_(en-GB)" class="podlinkpod"
>&#34;ChangeName::Language&#34;</a> instance with a <code>localise</code> method.</p>

<p>Also expects a (considered to be universal to all languages) <code>separator.stringify_array_ref</code> Lexicon key to be set in the <a href="#ChangeName%3A%3ALanguages_(en-GB)" class="podlinkpod"
>&#34;ChangeName::Languages&#34;</a> base class for language classes.</p>

<h3><a class='u'
name="ChangeName::Config::YAML_(en-GB)"
>ChangeName::Config::YAML (en-GB)</a></h3>

<p>Package storing YAML formatted default configuration settings. Used if no external <code>.yml</code> file is provided, or for default values should any external file omit a setting.</p>

<h4><a class='u'
name="MODULE_NAME_(ChangeName::Config::YAML_en-GB)"
>MODULE NAME (ChangeName::Config::YAML en-GB)</a></h4>

<p>ChangeName::Config::YAML - Class containing default configuration settings for <code>ChangeName.pm</code> in YAML format.</p>

<h4><a class='u'
name="VERSION_(ChangeName::Config::YAML_en-GB)"
>VERSION (ChangeName::Config::YAML en-GB)</a></h4>

<p>v2.0.0</p>

<h4><a class='u'
name="SYNOPSIS_(ChangeName::Config::YAML_en-GB)"
>SYNOPSIS (ChangeName::Config::YAML en-GB)</a></h4>

<pre>    use YAML::Tiny;
    use ChangeName::Config::YAML;

    my  $config =    Load(ChangeName::Config::YAML::data);</pre>

<h4><a class='u'
name="DESCRIPTION_(ChangeName::Config::YAML_en-GB)"
>DESCRIPTION (ChangeName::Config::YAML en-GB)</a></h4>

<p>Class containing default configuration settings for <code>ChangeName.pm</code> in YAML format. Consists of a single <a href="#data_(en-GB)" class="podlinkpod"
>&#34;data&#34;</a> method that returns a string.</p>

<h4><a class='u'
name="METHODS_(ChangeName::Config::YAML_en-GB)"
>METHODS (ChangeName::Config::YAML en-GB)</a></h4>

<p><b>----------------</b></p>

<h5><a class='u'
name="data_(en-GB)"
>data (en-GB)</a></h5>

<p><b>----------------</b></p>

<p>Use the data method to return the yaml as a string:</p>

<pre>    my $yaml_string =   ChangeName::Config::YAML::data;</pre>

<p>This can then be loaded using <a href="https://metacpan.org/pod/YAML%3A%3ATiny" class="podlinkpod"
>YAML::Tiny</a>&#39;s <a href="https://metacpan.org/pod/YAML%3A%3ATiny#Load" class="podlinkpod"
>&#34;Load&#34;</a> Function:</p>

<pre>    use YAML::Tiny;
    my  $perl_data_structure    =   Load($yaml_string);</pre>

<p>When external modules like <a href="https://metacpan.org/pod/YAML%3A%3ATiny" class="podlinkpod"
>YAML::Tiny</a> are not available, you can use <a href="https://metacpan.org/pod/CPAN%3A%3AMeta%3A%3AYAML" class="podlinkpod"
>CPAN::Meta::YAML</a> in Perl&#39;s Core, since it is based on <a href="https://metacpan.org/pod/YAML%3A%3ATiny" class="podlinkpod"
>YAML::Tiny</a>. Bear in mind, <a href="https://metacpan.org/pod/CPAN%3A%3AMeta%3A%3AYAML" class="podlinkpod"
>CPAN::Meta::YAML</a> is only ever envisaged to support CPAN metadata files, and may not support the full YAML standard.</p>

<pre>    use CPAN::Meta::YAML qw(Load);

    my  $yaml_string            =   ChangeName::Config::YAML::data;
    my  $perl_data_structure    =   Load($yaml_string);</pre>

<p>These internal YAML configuration settings for <code>ChangeName.pm</code> can easily be customised with the use of external YAML files. See <a href="#YAML_CONFIGURATION_(en-GB)" class="podlinkpod"
>&#34;YAML CONFIGURATION (en-GB)&#34;</a> for more information on this.</p>

<p>This <code>data</code> method contains the default fallback configuration settings for the <code>ChangeName.pm</code> modulino file, so should not be edited to customise settings, and instead only be edited to change the fallback defaults the file uses, when external customisations are lacking, or relevant commandline <a href="#OPTIONS_(en-GB)" class="podlinkpod"
>&#34;options&#34;</a> are not specified.</p>

<h3><a class='u'
name="ChangeName::Config_(en-GB)"
>ChangeName::Config (en-GB)</a></h3>

<p>Package that loads configuration.</p>

<h3><a class='u'
name="ChangeName::Languages_(en-GB)"
>ChangeName::Languages (en-GB)</a></h3>

<p><a href="https://metacpan.org/pod/Locale%3A%3AMaketext" class="podlinkpod"
>Locale::Maketext</a> project class for loading language classes.</p>

<h3><a class='u'
name="ChangeName::Language_(en-GB)"
>ChangeName::Language (en-GB)</a></h3>

<p>Our own language class for the language we will use. Its <code>language_handle</code> attribute can be left undefined to use all supported languages.</p>

<h3><a class='u'
name="ChangeName::Log_(en-GB)"
>ChangeName::Log (en-GB)</a></h3>

<p>Allows for creating a <code>ChangeName::Log</code> object instance that has methods related to logging verbose, debug, stacktrace, and <a href="https://metacpan.org/pod/Data%3A%3ADumper" class="podlinkpod"
>Data::Dumper</a> output to an <code>EPrints::Repository</code>&#39;s <code>log</code> method, or <code>STDERR</code>.</p>

<h4><a class='u'
name="METHODS_(ChangeName::Log_en-GB)"
>METHODS (ChangeName::Log en-GB)</a></h4>

<p><b>----------------</b></p>

<h5><a class='u'
name="ready_(en-GB)"
>ready (en-GB)</a></h5>

<p><b>----------------</b></p>

<p>Checks if the <code>Log</code> object is ready for use in logging.</p>

<p>Presently the readiness checks include checking that the instance has a valid <a href="#ChangeName%3A%3ALanguage_(en-GB)" class="podlinkpod"
>&#34;ChangeName::Language&#34;</a> object for its <code>language</code> attribute.</p>

<p>The definition of readiness may change in future, and what will be constant always is that <code>ready</code> is intended to mean the object instance is ready for use - i.e. for having <code>debug</code>, <code>verbose</code> or <code>dumper</code> method calls.</p>

<h3><a class='u'
name="ChangeName::Modulino_(en-GB)"
>ChangeName::Modulino (en-GB)</a></h3>

<p>Runs the script from the commandline, or starts the operation via a new Modulino class instance.</p>

<h3><a class='u'
name="ChangeName::Operation_(en-GB)"
>ChangeName::Operation (en-GB)</a></h3>

<p>Performs the change name operation.</p>

<h4><a class='u'
name="MODULE_NAME_(ChangeName::Operation_en-GB)"
>MODULE NAME (ChangeName::Operation en-GB)</a></h4>

<p>ChangeName::Operation - changes the name of a dataset record.</p>

<h4><a class='u'
name="VERSION_(ChangeName::Operation_en-GB)"
>VERSION (ChangeName::Operation en-GB)</a></h4>

<p>v2.0.0</p>

<h4><a class='u'
name="SYNOPSIS_(ChangeName::Operation_en-GB)"
>SYNOPSIS (ChangeName::Operation en-GB)</a></h4>

<pre>    use ChangeName;

    my $object = ChangeName::Operation-&#62;new(@object_params);</pre>

<h4><a class='u'
name="DESCRIPTION_(ChangeName::Operation_en-GB)"
>DESCRIPTION (ChangeName::Operation en-GB)</a></h4>

<p>Contains methods that are part of the process of changing a name of a dataset record.</p>

<p>Loads the class when used in another script.</p>

<pre>    # Use in a unit test or other Perl Script:
    use ChangeName;
    
    my $object = ChangeName::Operation-&#62;new(@object_params);</pre>

<p>See <a href="#new_(ChangeName%3A%3AOperation_en-GB)" class="podlinkpod"
>&#34;new (ChangeName::Operation en-GB)&#34;</a> method for info on acceptable object parameters.</p>

<h4><a class='u'
name="CLASS_METHODS_(ChangeName::Operation_en-GB)"
>CLASS METHODS (ChangeName::Operation en-GB)</a></h4>

<p><b>----------------</b></p>

<h5><a class='u'
name="start_(en-GB)"
>start (en-GB)</a></h5>

<p><b>----------------</b></p>

<pre>    $class-&#62;start(%object_params);</pre>

<p>The code in this class method, can serve as an example of how to use the object.</p>

<p>This method is equivalent to the following method chain:</p>

<pre>    # Construct new object, and begin program flow...
    ChangeName::Operation-&#62;new(@object_params)-&#62;search-&#62;prepare-&#62;display-&#62;confirm-&#62;change-&#62;finish;</pre>

<p>This start method constructs a new <code>ChangeName::Operation</code> object instance from the class (using the object parameters passed in and the <a href="#new_(ChangeName%3A%3AOperation_en-GB)" class="podlinkpod"
>&#34;new&#34;</a> constructor)&#62;, upon which the program flow methods are then called, like so...</p>

<ul>
<li>Beginning with a search (<a href="#search_(en-GB)" class="podlinkpod"
>&#34;search (en-GB)&#34;</a>),</li>

<li>then preparing to find and replace (<a href="#prepare_(en-GB)" class="podlinkpod"
>&#34;prepare (en-GB)&#34;</a>),</li>

<li>then generating what will be displayed to the user (<a href="#display_(en-GB)" class="podlinkpod"
>&#34;display (en-GB)&#34;</a>),</li>

<li>confirming any changes to be made (<a href="#confirm_(en-GB)" class="podlinkpod"
>&#34;confirm (en-GB)&#34;</a>),</li>

<li>making changes (<a href="#change_(en-GB)" class="podlinkpod"
>&#34;change (en-GB)&#34;</a>),</li>

<li>and proceeding to finish (<a href="#finish_(en-GB)" class="podlinkpod"
>&#34;finish (en-GB)&#34;</a>).</li>
</ul>

<h4><a class='u'
name="CONSTRUCTORS_(ChangeName::Operation_en-GB)"
>CONSTRUCTORS (ChangeName::Operation en-GB)</a></h4>

<p><b>----------------</b></p>

<h5><a class='u'
name="new_(ChangeName::Operation_en-GB)"
>new (ChangeName::Operation en-GB)</a></h5>

<p><b>----------------</b></p>

<pre>    # Construct new object, and begin program flow...
    my  $object =   ChangeName::Operation-&#62;new(@object_params);</pre>

<p>Accepts parameters required for a new <code>ChangeName::Operation</code>, and returns a new <code>ChangeName::Operation</code> object, upon which program flow methods or setters and getters, can be called.</p>

<p>TODO - detail the object parameters accepted.</p>

<h4><a class='u'
name="INSTANCE_METHODS_(ChangeName::Operation_en-GB)"
>INSTANCE METHODS (ChangeName::Operation en-GB)</a></h4>

<p><b>----------------</b></p>

<h5><a class='u'
name="search_(en-GB)"
>search (en-GB)</a></h5>

<p><b>----------------</b></p>

<pre>    # Construct an object, and populate its 
    my  $object  =   ChangeName::Operation-&#62;new(@object_params)-&#62;search;</pre>

<p>Performs an EPrints search, according to values set during <code>ChangeName::Operation</code> object construction.</p>

<p>Returns the initial <code>ChangeName::Operation</code> object, now with <code>list_of_results</code> and <code>records_found</code> object attributes set.</p>

<p><b>----------------</b></p>

<h5><a class='u'
name="prepare_(en-GB)"
>prepare (en-GB)</a></h5>

<p><b>----------------</b></p>

<pre>    # Prepare for performing a find and replace operation... 
    my  $object  =   ChangeName::Operation-&#62;new(@object_params)-&#62;search-&#62;prepare;</pre>

<p>Should search results have been retrieved (will return prematurely if not), it will process the search results in order to generate useful lists, and then attempt to refine the search down by setting or prompting for a specific name part.</p>

<p>If find and replace values have not already been set, it will prompt the user for them too.</p>

<p><b>----------------</b></p>

<h5><a class='u'
name="display_(en-GB)"
>display (en-GB)</a></h5>

<p><b>----------------</b></p>

<p>To do.</p>

<p><b>----------------</b></p>

<h5><a class='u'
name="confirm_(en-GB)"
>confirm (en-GB)</a></h5>

<p><b>----------------</b></p>

<p>To do.</p>

<p><b>----------------</b></p>

<h5><a class='u'
name="change_(en-GB)"
>change (en-GB)</a></h5>

<p><b>----------------</b></p>

<p>To do.</p>

<p><b>----------------</b></p>

<h5><a class='u'
name="finish_(en-GB)"
>finish (en-GB)</a></h5>

<p><b>----------------</b></p>

<p>To do.</p>

<h2><a class='u'
name="AUTHOR_(en-GB)"
>AUTHOR (en-GB)</a></h2>

<p>Andrew Mehta</p>

<h2><a class='u'
name="COPYRIGHT_AND_LICENSE_(en-GB)"
>COPYRIGHT AND LICENSE (en-GB)</a></h2>

<p>Copyright &#169;2024, Andrew Mehta.</p>

<p>This program is free software; you can redistribute it and/or modify it under the same terms as Perl 5.40.0. For more details, see the full text of the licenses via <a href="https://metacpan.org/pod/perlartistic" class="podlinkpod"
>perlartistic</a> and <a href="https://metacpan.org/pod/perlgpl" class="podlinkpod"
>perlgpl</a>. This program is distributed in the hope that it will be useful, but without any warranty; without even the implied warranty of merchantability or fitness for a particular purpose.</p>

<!-- end doc -->

</body></html>
